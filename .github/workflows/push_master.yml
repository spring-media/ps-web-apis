name: Deployment
on:
  push:
    branches:
      - master

jobs:
  checks:
    name: Formatting checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@master

      - name: Install npm
        uses: actions/npm@master
        with:
          args: install

      - name: Npm check
        uses: actions/npm@master
        with:
          args: run check --if-present

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@master


      - name: Install npm
        uses: actions/npm@master
        with:
          args: install

      - name: Test npm
        uses: actions/npm@master
        with:
          args: run test

      - name: Build npm
        uses: actions/npm@master
        with:
          args: run build

      - name: Upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: ${{ github.event.repository.name }}-${{ github.event.pull_request.head.sha }}
          path: build

  infra:
    name: Terragrunt apply
    needs:
      - build
      - checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@master

      - name: Download artifact
        uses: actions/download-artifact@master
        with:
          name: ${{ github.event.repository.name }}-${{ github.event.pull_request.head.sha }}
          path: build

      - name: Terragrunt plan
        uses: docker://asideas/terragrunt:0.18.3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: eu-central-1
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GH_SSH_PRIVATE_KEY: ${{ secrets.GH_SSH_PRIVATE_KEY }}
        with:
          args: -c "sh ./pipelines/terragrunt.sh plan-all"

      - name: Terragrunt apply
        uses: docker://asideas/terragrunt:0.18.3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: eu-central-1
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GH_SSH_PRIVATE_KEY: ${{ secrets.GH_SSH_PRIVATE_KEY }}
        with:
          args: -c "sh ./pipelines/terragrunt.sh plan-all"

  deploy_uat:
    name: Deploy UAT
    runs-on: ubuntu-latest
    needs: infra
    steps:
      - name: Checkout branch
        uses: actions/checkout@master

      - name: Download artifact
        uses: actions/download-artifact@master
        with:
          name: ${{ github.event.repository.name }}-${{ github.event.pull_request.head.sha }}
          path: build

      - name: Deploy files
        uses: docker://asideas/terragrunt:0.18.3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          args: -c "bash ./pipelines/deploy.sh uat"

  test_uat:
    name: Test UAT
    runs-on: ubuntu-latest
    needs: deploy_uat
    steps:
      - name: Ghostinspector test UAT
        env:
          GHOSTINSPECTOR_APIKEY: ${{ secrets.GHOSTINSPECTOR_APIKEY }}
        run: |
          curl -s https://api.ghostinspector.com/v1/suites/5caddebf1e9d7d18efd832ec/execute/?apiKey=$GHOSTINSPECTOR_APIKEY | tee output | docker run -i stedolan/jq  'if .code != "SUCCESS" then error("Ghostinspector call failed") else .data[] | select(.passing == false) | error("Failing test: " + .name) end'

  deploy_prod:
    name: Deploy PROD
    runs-on: ubuntu-latest
    needs: test_uat
    steps:
      - name: Checkout branch
        uses: actions/checkout@master

      - name: Download artifact
        uses: actions/download-artifact@master
        with:
          name: ${{ github.event.repository.name }}-${{ github.event.pull_request.head.sha }}
          path: build

      - name: Deploy files
        uses: docker://asideas/terragrunt:0.18.3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        with:
          args: -c "bash ./pipelines/deploy.sh prod"

  test_prod:
    name: Test PROD
    runs-on: ubuntu-latest
    needs: deploy_prod
    steps:
      - name: Ghostinspector test PROD
        env:
          GHOSTINSPECTOR_APIKEY: ${{ secrets.GHOSTINSPECTOR_APIKEY }}
        run: |
          curl -s https://api.ghostinspector.com/v1/suites/5cadded51e9d7d18efd83339/execute/?apiKey=$GHOSTINSPECTOR_APIKEY | tee output | docker run -i stedolan/jq  'if .code != "SUCCESS" then error("Ghostinspector call failed") else .data[] | select(.passing == false) | error("Failing test: " + .name) end'
